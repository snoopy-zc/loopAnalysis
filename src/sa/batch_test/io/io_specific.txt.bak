//prefixes
java.io.File ^create
java.io.File ^mkdir
java.io.File renameTo
java.io.File delete
java.io.BufferedReader ^read
java.io.BufferedWriter write
java.io.BufferedWriter append
java.io.FileInputStream read
java.io.FileOutputStream write
java.io.FileReader read
java.io.FileWriter write
java.io.PrintWriter ^print
java.io.PrintWriter append
java.io.PrintWriter write
java.io.InputStreamReader read
java.io.OutputStreamWriter write
java.io.DataInputStream ^read
java.io.DataOutputStream ^write
java.io.BufferedInputStream read
java.io.BufferedOutputStream write
java.io.InputStream read
java.io.OutputStream write
java.io.DataInput ^read
java.io.DataOutput ^write
java.io.RandomAccessFile ^write
java.io.RandomAccessFile ^read
java.nio.MappedByteBuffer ^put
java.nio.MappedByteBuffer ^get


#types = 953
RPC Call: org.apache.hadoop.mapred.TaskUmbilicalProtocol.canCommit(Lorg/apache/hadoop/mapred/TaskAttemptID;Ljava/lang/String;)Z
RPC Call: org.apache.hadoop.mapred.TaskUmbilicalProtocol.commitPending(Lorg/apache/hadoop/mapred/TaskAttemptID;Lorg/apache/hadoop/mapred/TaskStatus;Ljava/lang/String;)V
RPC Call: org.apache.hadoop.mapred.TaskUmbilicalProtocol.done(Lorg/apache/hadoop/mapred/TaskAttemptID;Ljava/lang/String;)V
RPC Call: org.apache.hadoop.mapred.TaskUmbilicalProtocol.fatalError(Lorg/apache/hadoop/mapred/TaskAttemptID;Ljava/lang/String;Ljava/lang/String;)V
RPC Call: org.apache.hadoop.mapred.TaskUmbilicalProtocol.fsError(Lorg/apache/hadoop/mapred/TaskAttemptID;Ljava/lang/String;Ljava/lang/String;)V
RPC Call: org.apache.hadoop.mapred.TaskUmbilicalProtocol.getMapCompletionEvents(Lorg/apache/hadoop/mapred/JobID;IILorg/apache/hadoop/mapred/TaskAttemptID;Ljava/lang/String;)Lorg/apache/hadoop/mapred/MapTaskCompletionEventsUpdate;
RPC Call: org.apache.hadoop.mapred.TaskUmbilicalProtocol.getTask(Lorg/apache/hadoop/mapred/JvmContext;Ljava/lang/String;)Lorg/apache/hadoop/mapred/JvmTask;
RPC Call: org.apache.hadoop.mapred.TaskUmbilicalProtocol.ping(Lorg/apache/hadoop/mapred/TaskAttemptID;Ljava/lang/String;)Z
RPC Call: org.apache.hadoop.mapred.TaskUmbilicalProtocol.reportDiagnosticInfo(Lorg/apache/hadoop/mapred/TaskAttemptID;Ljava/lang/String;Ljava/lang/String;)V
RPC Call: org.apache.hadoop.mapred.TaskUmbilicalProtocol.reportNextRecordRange(Lorg/apache/hadoop/mapred/TaskAttemptID;Lorg/apache/hadoop/mapred/SortedRanges$Range;Ljava/lang/String;)V
RPC Call: org.apache.hadoop.mapred.TaskUmbilicalProtocol.statusUpdate(Lorg/apache/hadoop/mapred/TaskAttemptID;Lorg/apache/hadoop/mapred/TaskStatus;Ljava/lang/String;)Z
RPC Call: org.apache.hadoop.mapreduce.protocol.ClientProtocol.getActiveTrackers()[Lorg/apache/hadoop/mapreduce/TaskTrackerInfo;
RPC Call: org.apache.hadoop.mapreduce.protocol.ClientProtocol.getAllJobs()[Lorg/apache/hadoop/mapreduce/JobStatus;
RPC Call: org.apache.hadoop.mapreduce.protocol.ClientProtocol.getBlacklistedTrackers()[Lorg/apache/hadoop/mapreduce/TaskTrackerInfo;
RPC Call: org.apache.hadoop.mapreduce.protocol.ClientProtocol.killJob(Lorg/apache/hadoop/mapreduce/JobID;)V
RPC Call: org.apache.hadoop.yarn.api.AMRMProtocol.allocate(Lorg/apache/hadoop/yarn/api/protocolrecords/AllocateRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/AllocateResponse;
RPC Call: org.apache.hadoop.yarn.api.AMRMProtocol.finishApplicationMaster(Lorg/apache/hadoop/yarn/api/protocolrecords/FinishApplicationMasterRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/FinishApplicationMasterResponse;
RPC Call: org.apache.hadoop.yarn.api.AMRMProtocol.registerApplicationMaster(Lorg/apache/hadoop/yarn/api/protocolrecords/RegisterApplicationMasterRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/RegisterApplicationMasterResponse;
RPC Call: org.apache.hadoop.yarn.api.ClientRMProtocol.forceKillApplication(Lorg/apache/hadoop/yarn/api/protocolrecords/KillApplicationRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/KillApplicationResponse;
RPC Call: org.apache.hadoop.yarn.api.ClientRMProtocol.getApplicationReport(Lorg/apache/hadoop/yarn/api/protocolrecords/GetApplicationReportRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/GetApplicationReportResponse;
RPC Call: org.apache.hadoop.yarn.api.ClientRMProtocol.getClusterMetrics(Lorg/apache/hadoop/yarn/api/protocolrecords/GetClusterMetricsRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/GetClusterMetricsResponse;
RPC Call: org.apache.hadoop.yarn.api.ClientRMProtocol.getClusterNodes(Lorg/apache/hadoop/yarn/api/protocolrecords/GetClusterNodesRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/GetClusterNodesResponse;
RPC Call: org.apache.hadoop.yarn.api.ClientRMProtocol.getNewApplication(Lorg/apache/hadoop/yarn/api/protocolrecords/GetNewApplicationRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/GetNewApplicationResponse;
RPC Call: org.apache.hadoop.yarn.api.ClientRMProtocol.getQueueInfo(Lorg/apache/hadoop/yarn/api/protocolrecords/GetQueueInfoRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/GetQueueInfoResponse;
RPC Call: org.apache.hadoop.yarn.api.ClientRMProtocol.getQueueUserAcls(Lorg/apache/hadoop/yarn/api/protocolrecords/GetQueueUserAclsInfoRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/GetQueueUserAclsInfoResponse;
RPC Call: org.apache.hadoop.yarn.api.ClientRMProtocol.submitApplication(Lorg/apache/hadoop/yarn/api/protocolrecords/SubmitApplicationRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/SubmitApplicationResponse;
RPC Call: org.apache.hadoop.yarn.api.ContainerManager.startContainer(Lorg/apache/hadoop/yarn/api/protocolrecords/StartContainerRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/StartContainerResponse;
RPC Call: org.apache.hadoop.yarn.api.ContainerManager.stopContainer(Lorg/apache/hadoop/yarn/api/protocolrecords/StopContainerRequest;)Lorg/apache/hadoop/yarn/api/protocolrecords/StopContainerResponse;
RPC Call: org.apache.hadoop.yarn.server.api.ResourceTracker.nodeHeartbeat(Lorg/apache/hadoop/yarn/server/api/protocolrecords/NodeHeartbeatRequest;)Lorg/apache/hadoop/yarn/server/api/protocolrecords/NodeHeartbeatResponse;
RPC Call: org.apache.hadoop.yarn.server.api.ResourceTracker.registerNodeManager(Lorg/apache/hadoop/yarn/server/api/protocolrecords/RegisterNodeManagerRequest;)Lorg/apache/hadoop/yarn/server/api/protocolrecords/RegisterNodeManagerResponse;
java.io.BufferedReader.close()V
java.io.BufferedReader.read([CII)I
java.io.BufferedReader.readLine()Ljava/lang/String;
java.io.ByteArrayOutputStream.close()V
java.io.ByteArrayOutputStream.reset()V
java.io.ByteArrayOutputStream.size()I
java.io.ByteArrayOutputStream.toByteArray()[B
java.io.ByteArrayOutputStream.toString()Ljava/lang/String;
java.io.ByteArrayOutputStream.write([BII)V
java.io.Closeable.close()V
java.io.DataInput.readBoolean()Z
java.io.DataInput.readByte()B
java.io.DataInput.readChar()C
java.io.DataInput.readDouble()D
java.io.DataInput.readFloat()F
java.io.DataInput.readFully([B)V
java.io.DataInput.readFully([BII)V
java.io.DataInput.readInt()I
java.io.DataInput.readLong()J
java.io.DataInput.readShort()S
java.io.DataInput.readUTF()Ljava/lang/String;
java.io.DataInput.readUnsignedByte()I
java.io.DataInput.readUnsignedShort()I
java.io.DataInput.skipBytes(I)I
java.io.DataInputStream.available()I
java.io.DataInputStream.close()V
java.io.DataInputStream.mark(I)V
java.io.DataInputStream.read()I
java.io.DataInputStream.read([BII)I
java.io.DataInputStream.readBoolean()Z
java.io.DataInputStream.readByte()B
java.io.DataInputStream.readChar()C
java.io.DataInputStream.readFloat()F
java.io.DataInputStream.readFully([B)V
java.io.DataInputStream.readFully([BII)V
java.io.DataInputStream.readInt()I
java.io.DataInputStream.readLine()Ljava/lang/String;
java.io.DataInputStream.readLong()J
java.io.DataInputStream.readShort()S
java.io.DataInputStream.readUTF()Ljava/lang/String;
java.io.DataInputStream.reset()V
java.io.DataInputStream.skip(J)J
java.io.DataInputStream.skipBytes(I)I
java.io.DataOutput.write(I)V
java.io.DataOutput.write([B)V
java.io.DataOutput.write([BII)V
java.io.DataOutput.writeBoolean(Z)V
java.io.DataOutput.writeByte(I)V
java.io.DataOutput.writeChar(I)V
java.io.DataOutput.writeDouble(D)V
java.io.DataOutput.writeFloat(F)V
java.io.DataOutput.writeInt(I)V
java.io.DataOutput.writeLong(J)V
java.io.DataOutput.writeShort(I)V
java.io.DataOutput.writeUTF(Ljava/lang/String;)V
java.io.DataOutputStream.close()V
java.io.DataOutputStream.flush()V
java.io.DataOutputStream.write(I)V
java.io.DataOutputStream.write([B)V
java.io.DataOutputStream.write([BII)V
java.io.DataOutputStream.writeBoolean(Z)V
java.io.DataOutputStream.writeByte(I)V
java.io.DataOutputStream.writeBytes(Ljava/lang/String;)V
java.io.DataOutputStream.writeChar(I)V
java.io.DataOutputStream.writeInt(I)V
java.io.DataOutputStream.writeLong(J)V
java.io.DataOutputStream.writeShort(I)V
java.io.DataOutputStream.writeUTF(Ljava/lang/String;)V
java.io.File.canExecute()Z
java.io.File.canRead()Z
java.io.File.canWrite()Z
java.io.File.compareTo(Ljava/io/File;)I
java.io.File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
java.io.File.delete()Z
java.io.File.deleteOnExit()V
java.io.File.exists()Z
java.io.File.getAbsoluteFile()Ljava/io/File;
java.io.File.getAbsolutePath()Ljava/lang/String;
java.io.File.getCanonicalFile()Ljava/io/File;
java.io.File.getCanonicalPath()Ljava/lang/String;
java.io.File.getName()Ljava/lang/String;
java.io.File.getParent()Ljava/lang/String;
java.io.File.getParentFile()Ljava/io/File;
java.io.File.getPath()Ljava/lang/String;
java.io.File.isAbsolute()Z
java.io.File.isDirectory()Z
java.io.File.isFile()Z
java.io.File.lastModified()J
java.io.File.length()J
java.io.File.list()[Ljava/lang/String;
java.io.File.list(Ljava/io/FilenameFilter;)[Ljava/lang/String;
java.io.File.listFiles()[Ljava/io/File;
java.io.File.mkdir()Z
java.io.File.mkdirs()Z
java.io.File.renameTo(Ljava/io/File;)Z
java.io.File.toString()Ljava/lang/String;
java.io.File.toURI()Ljava/net/URI;
java.io.File.toURL()Ljava/net/URL;
java.io.FileInputStream.close()V
java.io.FileInputStream.getChannel()Ljava/nio/channels/FileChannel;
java.io.FileInputStream.getFD()Ljava/io/FileDescriptor;
java.io.FileInputStream.read([B)I
java.io.FileInputStream.read([BII)I
java.io.FileInputStream.skip(J)J
java.io.FileOutputStream.close()V
java.io.FileOutputStream.getChannel()Ljava/nio/channels/FileChannel;
java.io.FileOutputStream.getFD()Ljava/io/FileDescriptor;
java.io.FileOutputStream.write([BII)V
java.io.FileReader.close()V
java.io.FileWriter.close()V
java.io.FileWriter.write(Ljava/lang/String;)V
java.io.FilterInputStream.read()I
java.io.FilterInputStream.read([BII)I
java.io.FilterOutputStream.close()V
java.io.IOException.fillInStackTrace()Ljava/lang/Throwable;
java.io.IOException.getCause()Ljava/lang/Throwable;
java.io.IOException.getLocalizedMessage()Ljava/lang/String;
java.io.IOException.getMessage()Ljava/lang/String;
java.io.IOException.getStackTrace()[Ljava/lang/StackTraceElement;
java.io.IOException.initCause(Ljava/lang/Throwable;)Ljava/lang/Throwable;
java.io.IOException.printStackTrace()V
java.io.IOException.printStackTrace(Ljava/io/PrintStream;)V
java.io.IOException.printStackTrace(Ljava/io/PrintWriter;)V
java.io.IOException.setStackTrace([Ljava/lang/StackTraceElement;)V
java.io.IOException.toString()Ljava/lang/String;
java.io.InputStream.available()I
java.io.InputStream.close()V
java.io.InputStream.read()I
java.io.InputStream.read([B)I
java.io.InputStream.read([BII)I
java.io.InputStream.skip(J)J
java.io.InputStreamReader.close()V
java.io.InputStreamReader.read([CII)I
java.io.InputStreamReader.skip(J)J
java.io.ObjectInputStream.readObject()Ljava/lang/Object;
java.io.OutputStream.close()V
java.io.OutputStream.flush()V
java.io.OutputStream.write(I)V
java.io.OutputStream.write([B)V
java.io.OutputStream.write([BII)V
java.io.PrintStream.append(Ljava/lang/CharSequence;)Ljava/io/PrintStream;
java.io.PrintStream.checkError()Z
java.io.PrintStream.close()V
java.io.PrintStream.flush()V
java.io.PrintStream.format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;
java.io.PrintStream.print(J)V
java.io.PrintStream.print(Ljava/lang/String;)V
java.io.PrintStream.printf(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;
java.io.PrintStream.println()V
java.io.PrintStream.println(C)V
java.io.PrintStream.println(I)V
java.io.PrintStream.println(Ljava/lang/Object;)V
java.io.PrintStream.println(Ljava/lang/String;)V
java.io.PrintStream.write([BII)V
java.io.PrintWriter.append(C)Ljava/io/PrintWriter;
java.io.PrintWriter.append(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;
java.io.PrintWriter.close()V
java.io.PrintWriter.flush()V
java.io.PrintWriter.print(C)V
java.io.PrintWriter.print(J)V
java.io.PrintWriter.print(Ljava/lang/Object;)V
java.io.PrintWriter.print(Ljava/lang/String;)V
java.io.PrintWriter.printf(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;
java.io.PrintWriter.println()V
java.io.PrintWriter.println(Ljava/lang/String;)V
java.io.PrintWriter.write(Ljava/lang/String;)V
java.io.PrintWriter.write([CII)V
java.io.PushbackReader.read()I
java.io.PushbackReader.unread(I)V
java.io.RandomAccessFile.close()V
java.io.RandomAccessFile.getChannel()Ljava/nio/channels/FileChannel;
java.io.RandomAccessFile.getFD()Ljava/io/FileDescriptor;
java.io.RandomAccessFile.readInt()I
java.io.RandomAccessFile.seek(J)V
java.io.RandomAccessFile.setLength(J)V
java.io.Reader.close()V
java.io.Reader.read([CII)I
java.io.StreamTokenizer.nextToken()I
java.io.StreamTokenizer.ordinaryChar(I)V
java.io.StreamTokenizer.parseNumbers()V
java.io.StreamTokenizer.quoteChar(I)V
java.io.StreamTokenizer.wordChars(II)V
java.io.StringWriter.toString()Ljava/lang/String;
java.io.UnsupportedEncodingException.getStackTrace()[Ljava/lang/StackTraceElement;
java.io.Writer.flush()V
java.io.Writer.write(Ljava/lang/String;)V
java.io.Writer.write([CII)V
java.net.ConnectException.initCause(Ljava/lang/Throwable;)Ljava/lang/Throwable;
java.net.ConnectException.toString()Ljava/lang/String;
java.net.DatagramSocket.close()V
java.net.DatagramSocket.send(Ljava/net/DatagramPacket;)V
java.net.HttpURLConnection.addRequestProperty(Ljava/lang/String;Ljava/lang/String;)V
java.net.HttpURLConnection.connect()V
java.net.HttpURLConnection.disconnect()V
java.net.HttpURLConnection.getContentLength()I
java.net.HttpURLConnection.getContentType()Ljava/lang/String;
java.net.HttpURLConnection.getErrorStream()Ljava/io/InputStream;
java.net.HttpURLConnection.getHeaderField(Ljava/lang/String;)Ljava/lang/String;
java.net.HttpURLConnection.getInputStream()Ljava/io/InputStream;
java.net.HttpURLConnection.getResponseCode()I
java.net.HttpURLConnection.getResponseMessage()Ljava/lang/String;
java.net.HttpURLConnection.setAllowUserInteraction(Z)V
java.net.HttpURLConnection.setChunkedStreamingMode(I)V
java.net.HttpURLConnection.setConnectTimeout(I)V
java.net.HttpURLConnection.setDoOutput(Z)V
java.net.HttpURLConnection.setInstanceFollowRedirects(Z)V
java.net.HttpURLConnection.setReadTimeout(I)V
java.net.HttpURLConnection.setRequestMethod(Ljava/lang/String;)V
java.net.HttpURLConnection.setRequestProperty(Ljava/lang/String;Ljava/lang/String;)V
java.net.InetAddress.equals(Ljava/lang/Object;)Z
java.net.InetAddress.getAddress()[B
java.net.InetAddress.getAllByName(Ljava/lang/String;)[Ljava/net/InetAddress;
java.net.InetAddress.getByAddress(Ljava/lang/String;[B)Ljava/net/InetAddress;
java.net.InetAddress.getByName(Ljava/lang/String;)Ljava/net/InetAddress;
java.net.InetAddress.getCanonicalHostName()Ljava/lang/String;
java.net.InetAddress.getHostAddress()Ljava/lang/String;
java.net.InetAddress.getHostName()Ljava/lang/String;
java.net.InetAddress.getLocalHost()Ljava/net/InetAddress;
java.net.InetAddress.isAnyLocalAddress()Z
java.net.InetAddress.isLoopbackAddress()Z
java.net.InetSocketAddress.createUnresolved(Ljava/lang/String;I)Ljava/net/InetSocketAddress;
java.net.InetSocketAddress.equals(Ljava/lang/Object;)Z
java.net.InetSocketAddress.getAddress()Ljava/net/InetAddress;
java.net.InetSocketAddress.getHostName()Ljava/lang/String;
java.net.InetSocketAddress.getPort()I
java.net.InetSocketAddress.isUnresolved()Z
java.net.InetSocketAddress.toString()Ljava/lang/String;
java.net.NetworkInterface.getByInetAddress(Ljava/net/InetAddress;)Ljava/net/NetworkInterface;
java.net.NetworkInterface.getByName(Ljava/lang/String;)Ljava/net/NetworkInterface;
java.net.NetworkInterface.getInetAddresses()Ljava/util/Enumeration;
java.net.NoRouteToHostException.initCause(Ljava/lang/Throwable;)Ljava/lang/Throwable;
java.net.ServerSocket.accept()Ljava/net/Socket;
java.net.ServerSocket.bind(Ljava/net/SocketAddress;I)V
java.net.ServerSocket.close()V
java.net.ServerSocket.getLocalPort()I
java.net.ServerSocket.getLocalSocketAddress()Ljava/net/SocketAddress;
java.net.ServerSocket.isBound()Z
java.net.Socket.bind(Ljava/net/SocketAddress;)V
java.net.Socket.close()V
java.net.Socket.connect(Ljava/net/SocketAddress;I)V
java.net.Socket.getChannel()Ljava/nio/channels/SocketChannel;
java.net.Socket.getInetAddress()Ljava/net/InetAddress;
java.net.Socket.getInputStream()Ljava/io/InputStream;
java.net.Socket.getLocalAddress()Ljava/net/InetAddress;
java.net.Socket.getLocalPort()I
java.net.Socket.getLocalSocketAddress()Ljava/net/SocketAddress;
java.net.Socket.getOutputStream()Ljava/io/OutputStream;
java.net.Socket.getPort()I
java.net.Socket.getReceiveBufferSize()I
java.net.Socket.getRemoteSocketAddress()Ljava/net/SocketAddress;
java.net.Socket.getSendBufferSize()I
java.net.Socket.getSoTimeout()I
java.net.Socket.getTcpNoDelay()Z
java.net.Socket.isClosed()Z
java.net.Socket.setKeepAlive(Z)V
java.net.Socket.setSendBufferSize(I)V
java.net.Socket.setSoTimeout(I)V
java.net.Socket.setTcpNoDelay(Z)V
java.net.Socket.shutdownOutput()V
java.net.Socket.toString()Ljava/lang/String;
java.net.SocketException.printStackTrace()V
java.net.SocketTimeoutException.initCause(Ljava/lang/Throwable;)Ljava/lang/Throwable;
java.net.URI.compareTo(Ljava/net/URI;)I
java.net.URI.create(Ljava/lang/String;)Ljava/net/URI;
java.net.URI.equals(Ljava/lang/Object;)Z
java.net.URI.getAuthority()Ljava/lang/String;
java.net.URI.getFragment()Ljava/lang/String;
java.net.URI.getHost()Ljava/lang/String;
java.net.URI.getPath()Ljava/lang/String;
java.net.URI.getPort()I
java.net.URI.getQuery()Ljava/lang/String;
java.net.URI.getScheme()Ljava/lang/String;
java.net.URI.getSchemeSpecificPart()Ljava/lang/String;
java.net.URI.getUserInfo()Ljava/lang/String;
java.net.URI.normalize()Ljava/net/URI;
java.net.URI.relativize(Ljava/net/URI;)Ljava/net/URI;
java.net.URI.resolve(Ljava/net/URI;)Ljava/net/URI;
java.net.URI.toASCIIString()Ljava/lang/String;
java.net.URI.toString()Ljava/lang/String;
java.net.URI.toURL()Ljava/net/URL;
java.net.URISyntaxException.printStackTrace()V
java.net.URL.getContent()Ljava/lang/Object;
java.net.URL.getFile()Ljava/lang/String;
java.net.URL.getHost()Ljava/lang/String;
java.net.URL.getPath()Ljava/lang/String;
java.net.URL.getPort()I
java.net.URL.getProtocol()Ljava/lang/String;
java.net.URL.getQuery()Ljava/lang/String;
java.net.URL.openConnection()Ljava/net/URLConnection;
java.net.URL.openConnection(Ljava/net/Proxy;)Ljava/net/URLConnection;
java.net.URL.toString()Ljava/lang/String;
java.net.URLConnection.connect()V
java.net.URLConnection.getInputStream()Ljava/io/InputStream;
java.net.URLConnection.setConnectTimeout(I)V
java.net.URLConnection.setReadTimeout(I)V
java.net.URLDecoder.decode(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
java.net.URLEncoder.encode(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
java.net.UnknownHostException.initCause(Ljava/lang/Throwable;)Ljava/lang/Throwable;
java.nio.Buffer.clear()Ljava/nio/Buffer;
java.nio.Buffer.limit(I)Ljava/nio/Buffer;
java.nio.Buffer.position()I
java.nio.Buffer.position(I)Ljava/nio/Buffer;
java.nio.Buffer.remaining()I
java.nio.Buffer.rewind()Ljava/nio/Buffer;
java.nio.ByteBuffer.allocate(I)Ljava/nio/ByteBuffer;
java.nio.ByteBuffer.allocateDirect(I)Ljava/nio/ByteBuffer;
java.nio.ByteBuffer.array()[B
java.nio.ByteBuffer.arrayOffset()I
java.nio.ByteBuffer.asIntBuffer()Ljava/nio/IntBuffer;
java.nio.ByteBuffer.asLongBuffer()Ljava/nio/LongBuffer;
java.nio.ByteBuffer.capacity()I
java.nio.ByteBuffer.clear()Ljava/nio/Buffer;
java.nio.ByteBuffer.duplicate()Ljava/nio/ByteBuffer;
java.nio.ByteBuffer.equals(Ljava/lang/Object;)Z
java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
java.nio.ByteBuffer.get()B
java.nio.ByteBuffer.get(I)B
java.nio.ByteBuffer.get([B)Ljava/nio/ByteBuffer;
java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
java.nio.ByteBuffer.getInt()I
java.nio.ByteBuffer.getShort()S
java.nio.ByteBuffer.hasArray()Z
java.nio.ByteBuffer.hasRemaining()Z
java.nio.ByteBuffer.limit()I
java.nio.ByteBuffer.limit(I)Ljava/nio/Buffer;
java.nio.ByteBuffer.mark()Ljava/nio/Buffer;
java.nio.ByteBuffer.position()I
java.nio.ByteBuffer.position(I)Ljava/nio/Buffer;
java.nio.ByteBuffer.put(B)Ljava/nio/ByteBuffer;
java.nio.ByteBuffer.put([B)Ljava/nio/ByteBuffer;
java.nio.ByteBuffer.put([BII)Ljava/nio/ByteBuffer;
java.nio.ByteBuffer.putInt(I)Ljava/nio/ByteBuffer;
java.nio.ByteBuffer.putShort(S)Ljava/nio/ByteBuffer;
java.nio.ByteBuffer.remaining()I
java.nio.ByteBuffer.reset()Ljava/nio/Buffer;
java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
java.nio.ByteBuffer.slice()Ljava/nio/ByteBuffer;
java.nio.ByteBuffer.wrap([B)Ljava/nio/ByteBuffer;
java.nio.ByteBuffer.wrap([BII)Ljava/nio/ByteBuffer;
java.nio.CharBuffer.toString()Ljava/lang/String;
java.nio.CharBuffer.wrap([C)Ljava/nio/CharBuffer;
java.nio.IntBuffer.capacity()I
java.nio.IntBuffer.get()I
java.nio.IntBuffer.get(I)I
java.nio.IntBuffer.limit(I)Ljava/nio/Buffer;
java.nio.IntBuffer.put(II)Ljava/nio/IntBuffer;
java.nio.IntBuffer.rewind()Ljava/nio/Buffer;
java.nio.LongBuffer.capacity()I
java.nio.LongBuffer.get(I)J
java.nio.LongBuffer.put(IJ)Ljava/nio/LongBuffer;
java.nio.channels.Channels.newChannel(Ljava/io/InputStream;)Ljava/nio/channels/ReadableByteChannel;
java.nio.channels.FileChannel.close()V
java.nio.channels.FileChannel.force(Z)V
java.nio.channels.FileChannel.isOpen()Z
java.nio.channels.FileChannel.position()J
java.nio.channels.FileChannel.position(J)Ljava/nio/channels/FileChannel;
java.nio.channels.FileChannel.read(Ljava/nio/ByteBuffer;)I
java.nio.channels.FileChannel.size()J
java.nio.channels.FileChannel.transferTo(JJLjava/nio/channels/WritableByteChannel;)J
java.nio.channels.FileChannel.truncate(J)Ljava/nio/channels/FileChannel;
java.nio.channels.FileChannel.tryLock()Ljava/nio/channels/FileLock;
java.nio.channels.FileChannel.write(Ljava/nio/ByteBuffer;J)I
java.nio.channels.FileLock.channel()Ljava/nio/channels/FileChannel;
java.nio.channels.FileLock.release()V
java.nio.channels.ReadableByteChannel.read(Ljava/nio/ByteBuffer;)I
java.nio.channels.SelectableChannel.configureBlocking(Z)Ljava/nio/channels/SelectableChannel;
java.nio.channels.SelectableChannel.isOpen()Z
java.nio.channels.SelectableChannel.provider()Ljava/nio/channels/spi/SelectorProvider;
java.nio.channels.SelectableChannel.register(Ljava/nio/channels/Selector;I)Ljava/nio/channels/SelectionKey;
java.nio.channels.SelectionKey.attach(Ljava/lang/Object;)Ljava/lang/Object;
java.nio.channels.SelectionKey.attachment()Ljava/lang/Object;
java.nio.channels.SelectionKey.cancel()V
java.nio.channels.SelectionKey.channel()Ljava/nio/channels/SelectableChannel;
java.nio.channels.SelectionKey.interestOps(I)Ljava/nio/channels/SelectionKey;
java.nio.channels.SelectionKey.isAcceptable()Z
java.nio.channels.SelectionKey.isReadable()Z
java.nio.channels.SelectionKey.isValid()Z
java.nio.channels.SelectionKey.isWritable()Z
java.nio.channels.Selector.close()V
java.nio.channels.Selector.keys()Ljava/util/Set;
java.nio.channels.Selector.open()Ljava/nio/channels/Selector;
java.nio.channels.Selector.select()I
java.nio.channels.Selector.select(J)I
java.nio.channels.Selector.selectNow()I
java.nio.channels.Selector.selectedKeys()Ljava/util/Set;
java.nio.channels.Selector.wakeup()Ljava/nio/channels/Selector;
java.nio.channels.ServerSocketChannel.accept()Ljava/nio/channels/SocketChannel;
java.nio.channels.ServerSocketChannel.close()V
java.nio.channels.ServerSocketChannel.configureBlocking(Z)Ljava/nio/channels/SelectableChannel;
java.nio.channels.ServerSocketChannel.open()Ljava/nio/channels/ServerSocketChannel;
java.nio.channels.ServerSocketChannel.register(Ljava/nio/channels/Selector;I)Ljava/nio/channels/SelectionKey;
java.nio.channels.ServerSocketChannel.socket()Ljava/net/ServerSocket;
java.nio.channels.SocketChannel.close()V
java.nio.channels.SocketChannel.configureBlocking(Z)Ljava/nio/channels/SelectableChannel;
java.nio.channels.SocketChannel.connect(Ljava/net/SocketAddress;)Z
java.nio.channels.SocketChannel.finishConnect()Z
java.nio.channels.SocketChannel.isBlocking()Z
java.nio.channels.SocketChannel.isOpen()Z
java.nio.channels.SocketChannel.open()Ljava/nio/channels/SocketChannel;
java.nio.channels.SocketChannel.register(Ljava/nio/channels/Selector;I)Ljava/nio/channels/SelectionKey;
java.nio.channels.SocketChannel.register(Ljava/nio/channels/Selector;ILjava/lang/Object;)Ljava/nio/channels/SelectionKey;
java.nio.channels.SocketChannel.socket()Ljava/net/Socket;
java.nio.channels.WritableByteChannel.write(Ljava/nio/ByteBuffer;)I
java.nio.channels.spi.SelectorProvider.openSelector()Ljava/nio/channels/spi/AbstractSelector;
java.nio.charset.CharacterCodingException.printStackTrace()V
java.nio.charset.CharsetDecoder.decode(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;
java.nio.charset.CharsetDecoder.onMalformedInput(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;
java.nio.charset.CharsetDecoder.onUnmappableCharacter(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;
java.nio.charset.CharsetEncoder.encode(Ljava/nio/CharBuffer;)Ljava/nio/ByteBuffer;
java.nio.charset.CharsetEncoder.onMalformedInput(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;
java.nio.charset.CharsetEncoder.onUnmappableCharacter(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;
java.nio.charset.UnsupportedCharsetException.toString()Ljava/lang/String;
java.sql.Connection.close()V
java.sql.Connection.commit()V
java.sql.Connection.createStatement()Ljava/sql/Statement;
java.sql.Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement;
java.sql.Date.getTime()J
java.sql.PreparedStatement.executeQuery()Ljava/sql/ResultSet;
java.sql.PreparedStatement.setFetchSize(I)V
java.sql.ResultSet.close()V
java.sql.ResultSet.getBigDecimal(I)Ljava/math/BigDecimal;
java.sql.ResultSet.getDate(I)Ljava/sql/Date;
java.sql.ResultSet.getDouble(I)D
java.sql.ResultSet.getLong(I)J
java.sql.ResultSet.getMetaData()Ljava/sql/ResultSetMetaData;
java.sql.ResultSet.getString(I)Ljava/lang/String;
java.sql.ResultSet.getTime(I)Ljava/sql/Time;
java.sql.ResultSet.getTimestamp(I)Ljava/sql/Timestamp;
java.sql.ResultSet.next()Z
java.sql.ResultSetMetaData.getColumnType(I)I
java.sql.Statement.close()V
java.sql.Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;
java.sql.Time.getTime()J
java.sql.Timestamp.getNanos()I
java.sql.Timestamp.getTime()J
java.sql.Timestamp.setNanos(I)V
org.apache.hadoop.fs.AbstractFileSystem.checkPath(Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.AbstractFileSystem.createInternal(Lorg/apache/hadoop/fs/Path;Ljava/util/EnumSet;Lorg/apache/hadoop/fs/permission/FsPermission;ISJLorg/apache/hadoop/util/Progressable;Lorg/apache/hadoop/fs/Options$ChecksumOpt;Z)Lorg/apache/hadoop/fs/FSDataOutputStream;
org.apache.hadoop.fs.AbstractFileSystem.getDelegationTokens(Ljava/lang/String;)Ljava/util/List;
org.apache.hadoop.fs.AbstractFileSystem.getLinkTarget(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.AbstractFileSystem.getServerDefaults()Lorg/apache/hadoop/fs/FsServerDefaults;
org.apache.hadoop.fs.AbstractFileSystem.getUri()Ljava/net/URI;
org.apache.hadoop.fs.AbstractFileSystem.listStatus(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.AbstractFileSystem.renameInternal(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;Z)V
org.apache.hadoop.fs.AbstractFileSystem.resolvePath(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.BlockLocation.getHosts()[Ljava/lang/String;
org.apache.hadoop.fs.BlockLocation.getLength()J
org.apache.hadoop.fs.BlockLocation.getOffset()J
org.apache.hadoop.fs.BlockLocation.getTopologyPaths()[Ljava/lang/String;
org.apache.hadoop.fs.BlockLocation.setLength(J)V
org.apache.hadoop.fs.BlockLocation.setOffset(J)V
org.apache.hadoop.fs.ChecksumException.getPos()J
org.apache.hadoop.fs.ChecksumFileSystem.copyToLocalFile(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;Z)V
org.apache.hadoop.fs.ChecksumFileSystem.getApproxChkSumLength(J)D
org.apache.hadoop.fs.ChecksumFileSystem.getChecksumFile(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.ChecksumFileSystem.getChecksumLength(JI)J
org.apache.hadoop.fs.ChecksumFileSystem.getConf()Lorg/apache/hadoop/conf/Configuration;
org.apache.hadoop.fs.ChecksumFileSystem.getLocal(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/LocalFileSystem;
org.apache.hadoop.fs.ChecksumFileSystem.listStatus(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.ChecksumFs.getMyFs()Lorg/apache/hadoop/fs/AbstractFileSystem;
org.apache.hadoop.fs.ChecksumFs.isChecksumFile(Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.ContentSummary.getDirectoryCount()J
org.apache.hadoop.fs.ContentSummary.getFileCount()J
org.apache.hadoop.fs.ContentSummary.getLength()J
org.apache.hadoop.fs.ContentSummary.toString(Z)Ljava/lang/String;
org.apache.hadoop.fs.DF$OSType.match(Ljava/lang/String;)Z
org.apache.hadoop.fs.DF$OSType.ordinal()I
org.apache.hadoop.fs.DF.getAvailable()J
org.apache.hadoop.fs.DF.getCapacity()J
org.apache.hadoop.fs.DF.getFilesystem()Ljava/lang/String;
org.apache.hadoop.fs.DF.getMount()Ljava/lang/String;
org.apache.hadoop.fs.DF.getOSType()Lorg/apache/hadoop/fs/DF$OSType;
org.apache.hadoop.fs.DF.getPercentUsed()I
org.apache.hadoop.fs.DF.getUsed()J
org.apache.hadoop.fs.DU.access$000(Lorg/apache/hadoop/fs/DU;)Z
org.apache.hadoop.fs.DU.access$100(Lorg/apache/hadoop/fs/DU;)J
org.apache.hadoop.fs.DU.access$200(Lorg/apache/hadoop/fs/DU;)V
org.apache.hadoop.fs.DU.access$302(Lorg/apache/hadoop/fs/DU;Ljava/io/IOException;)Ljava/io/IOException;
org.apache.hadoop.fs.DU.decDfsUsed(J)V
org.apache.hadoop.fs.DU.getUsed()J
org.apache.hadoop.fs.DU.run()V
org.apache.hadoop.fs.DU.shutdown()V
org.apache.hadoop.fs.DU.start()V
org.apache.hadoop.fs.FSDataInputStream.close()V
org.apache.hadoop.fs.FSDataInputStream.getPos()J
org.apache.hadoop.fs.FSDataInputStream.readBoolean()Z
org.apache.hadoop.fs.FSDataInputStream.readByte()B
org.apache.hadoop.fs.FSDataInputStream.readFully([B)V
org.apache.hadoop.fs.FSDataInputStream.readInt()I
org.apache.hadoop.fs.FSDataInputStream.readLong()J
org.apache.hadoop.fs.FSDataInputStream.readUTF()Ljava/lang/String;
org.apache.hadoop.fs.FSDataInputStream.seek(J)V
org.apache.hadoop.fs.FSDataOutputStream.close()V
org.apache.hadoop.fs.FSDataOutputStream.flush()V
org.apache.hadoop.fs.FSDataOutputStream.getPos()J
org.apache.hadoop.fs.FSDataOutputStream.hflush()V
org.apache.hadoop.fs.FSDataOutputStream.write([B)V
org.apache.hadoop.fs.FSDataOutputStream.write([BII)V
org.apache.hadoop.fs.FSDataOutputStream.writeBoolean(Z)V
org.apache.hadoop.fs.FSDataOutputStream.writeBytes(Ljava/lang/String;)V
org.apache.hadoop.fs.FSDataOutputStream.writeInt(I)V
org.apache.hadoop.fs.FSDataOutputStream.writeLong(J)V
org.apache.hadoop.fs.FSDataOutputStream.writeUTF(Ljava/lang/String;)V
org.apache.hadoop.fs.FSError.getMessage()Ljava/lang/String;
org.apache.hadoop.fs.FSInputChecker.needChecksum()Z
org.apache.hadoop.fs.FSInputChecker.read([BII)I
org.apache.hadoop.fs.FSInputChecker.read1([BII)I
org.apache.hadoop.fs.FSInputChecker.readChunk(J[BII[B)I
org.apache.hadoop.fs.FSInputChecker.seek(J)V
org.apache.hadoop.fs.FSInputChecker.seekToNewSource(J)Z
org.apache.hadoop.fs.FSInputChecker.set(ZLjava/util/zip/Checksum;II)V
org.apache.hadoop.fs.FSInputChecker.verifySums([BII)V
org.apache.hadoop.fs.FSInputStream.read(J[BII)I
org.apache.hadoop.fs.FSOutputSummer.convertToByteStream(Ljava/util/zip/Checksum;I)[B
org.apache.hadoop.fs.FSOutputSummer.flushBuffer(Z)V
org.apache.hadoop.fs.FSOutputSummer.write1([BII)I
org.apache.hadoop.fs.FileChecksum.getAlgorithmName()Ljava/lang/String;
org.apache.hadoop.fs.FileChecksum.getBytes()[B
org.apache.hadoop.fs.FileContext$FSLinkResolver.next(Lorg/apache/hadoop/fs/AbstractFileSystem;Lorg/apache/hadoop/fs/Path;)Ljava/lang/Object;
org.apache.hadoop.fs.FileContext$Util$2.handleFileStat(Lorg/apache/hadoop/fs/LocatedFileStatus;)V
org.apache.hadoop.fs.FileContext$Util.copy(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.FileContext$Util.copy(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;ZZ)Z
org.apache.hadoop.fs.FileContext$Util.exists(Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.FileContext$Util.getContentSummary(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/ContentSummary;
org.apache.hadoop.fs.FileContext$Util.getFileStatus([Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileContext$Util.globPathsLevel([Lorg/apache/hadoop/fs/Path;[Ljava/lang/String;I[Z)[Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileContext$Util.globStatusInternal(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/PathFilter;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileContext$Util.listStatus(Ljava/util/ArrayList;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/PathFilter;)V
org.apache.hadoop.fs.FileContext$Util.listStatus(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileContext$Util.listStatus([Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/PathFilter;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileContext.access$000(Lorg/apache/hadoop/fs/FileContext;Lorg/apache/hadoop/fs/AbstractFileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileContext.access$200(Lorg/apache/hadoop/fs/FileContext;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileContext.access$300(Lorg/apache/hadoop/fs/FileContext;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/AbstractFileSystem;
org.apache.hadoop.fs.FileContext.access$400(Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.FileContext.access$500(Lorg/apache/hadoop/fs/FileContext;Ljava/lang/String;Lorg/apache/hadoop/fs/Path;Z)V
org.apache.hadoop.fs.FileContext.access$600(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.FileContext.access$700(Lorg/apache/hadoop/fs/FileContext;)Lorg/apache/hadoop/conf/Configuration;
org.apache.hadoop.fs.FileContext.create(Lorg/apache/hadoop/fs/Path;Ljava/util/EnumSet;[Lorg/apache/hadoop/fs/Options$CreateOpts;)Lorg/apache/hadoop/fs/FSDataOutputStream;
org.apache.hadoop.fs.FileContext.delete(Lorg/apache/hadoop/fs/Path;Z)Z
org.apache.hadoop.fs.FileContext.getDefaultFileSystem()Lorg/apache/hadoop/fs/AbstractFileSystem;
org.apache.hadoop.fs.FileContext.getFileContext()Lorg/apache/hadoop/fs/FileContext;
org.apache.hadoop.fs.FileContext.getFileContext(Ljava/net/URI;)Lorg/apache/hadoop/fs/FileContext;
org.apache.hadoop.fs.FileContext.getFileContext(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileContext;
org.apache.hadoop.fs.FileContext.getFileContext(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileContext;
org.apache.hadoop.fs.FileContext.getFileStatus(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileContext.getLocalFSFileContext()Lorg/apache/hadoop/fs/FileContext;
org.apache.hadoop.fs.FileContext.getLocalFSFileContext(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileContext;
org.apache.hadoop.fs.FileContext.getWorkingDirectory()Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileContext.listStatus(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/RemoteIterator;
org.apache.hadoop.fs.FileContext.makeQualified(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileContext.mkdir(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;Z)V
org.apache.hadoop.fs.FileContext.open(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FSDataInputStream;
org.apache.hadoop.fs.FileContext.processDeleteOnExit()V
org.apache.hadoop.fs.FileContext.rename(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
org.apache.hadoop.fs.FileContext.resolveAbstractFileSystems(Lorg/apache/hadoop/fs/Path;)Ljava/util/Set;
org.apache.hadoop.fs.FileContext.setPermission(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)V
org.apache.hadoop.fs.FileContext.setUMask(Lorg/apache/hadoop/fs/permission/FsPermission;)V
org.apache.hadoop.fs.FileContext.setWorkingDirectory(Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.FileContext.util()Lorg/apache/hadoop/fs/FileContext$Util;
org.apache.hadoop.fs.FileStatus.compareTo(Ljava/lang/Object;)I
org.apache.hadoop.fs.FileStatus.equals(Ljava/lang/Object;)Z
org.apache.hadoop.fs.FileStatus.getAccessTime()J
org.apache.hadoop.fs.FileStatus.getBlockSize()J
org.apache.hadoop.fs.FileStatus.getGroup()Ljava/lang/String;
org.apache.hadoop.fs.FileStatus.getLen()J
org.apache.hadoop.fs.FileStatus.getModificationTime()J
org.apache.hadoop.fs.FileStatus.getOwner()Ljava/lang/String;
org.apache.hadoop.fs.FileStatus.getPath()Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileStatus.getPermission()Lorg/apache/hadoop/fs/permission/FsPermission;
org.apache.hadoop.fs.FileStatus.getReplication()S
org.apache.hadoop.fs.FileStatus.getSymlink()Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileStatus.isDirectory()Z
org.apache.hadoop.fs.FileStatus.isFile()Z
org.apache.hadoop.fs.FileStatus.isSymlink()Z
org.apache.hadoop.fs.FileStatus.write(Ljava/io/DataOutput;)V
org.apache.hadoop.fs.FileSystem$5.handleFileStat(Lorg/apache/hadoop/fs/LocatedFileStatus;)V
org.apache.hadoop.fs.FileSystem$Cache$Key.isEqual(Ljava/lang/Object;Ljava/lang/Object;)Z
org.apache.hadoop.fs.FileSystem$Cache.closeAll(Z)V
org.apache.hadoop.fs.FileSystem$Cache.remove(Lorg/apache/hadoop/fs/FileSystem$Cache$Key;Lorg/apache/hadoop/fs/FileSystem;)V
org.apache.hadoop.fs.FileSystem$Statistics.getBytesRead()J
org.apache.hadoop.fs.FileSystem$Statistics.getBytesWritten()J
org.apache.hadoop.fs.FileSystem$Statistics.getLargeReadOps()I
org.apache.hadoop.fs.FileSystem$Statistics.getReadOps()I
org.apache.hadoop.fs.FileSystem$Statistics.getScheme()Ljava/lang/String;
org.apache.hadoop.fs.FileSystem$Statistics.getWriteOps()I
org.apache.hadoop.fs.FileSystem$Statistics.incrementBytesRead(J)V
org.apache.hadoop.fs.FileSystem$Statistics.incrementLargeReadOps(I)V
org.apache.hadoop.fs.FileSystem$Statistics.incrementReadOps(I)V
org.apache.hadoop.fs.FileSystem$Statistics.incrementWriteOps(I)V
org.apache.hadoop.fs.FileSystem$Statistics.reset()V
org.apache.hadoop.fs.FileSystem.addDelegationTokens(Ljava/lang/String;Lorg/apache/hadoop/security/Credentials;)[Lorg/apache/hadoop/security/token/Token;
org.apache.hadoop.fs.FileSystem.checkPath(Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.FileSystem.close()V
org.apache.hadoop.fs.FileSystem.closeAllForUGI(Lorg/apache/hadoop/security/UserGroupInformation;)V
org.apache.hadoop.fs.FileSystem.collectDelegationTokens(Ljava/lang/String;Lorg/apache/hadoop/security/Credentials;Ljava/util/List;)V
org.apache.hadoop.fs.FileSystem.copyFromLocalFile(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.FileSystem.copyFromLocalFile(ZZLorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.FileSystem.copyToLocalFile(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.FileSystem.create(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)Lorg/apache/hadoop/fs/FSDataOutputStream;
org.apache.hadoop.fs.FileSystem.create(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FSDataOutputStream;
org.apache.hadoop.fs.FileSystem.create(Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/FSDataOutputStream;
org.apache.hadoop.fs.FileSystem.create(Lorg/apache/hadoop/fs/Path;ZI)Lorg/apache/hadoop/fs/FSDataOutputStream;
org.apache.hadoop.fs.FileSystem.create(Lorg/apache/hadoop/fs/Path;ZISJLorg/apache/hadoop/util/Progressable;)Lorg/apache/hadoop/fs/FSDataOutputStream;
org.apache.hadoop.fs.FileSystem.delete(Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.FileSystem.delete(Lorg/apache/hadoop/fs/Path;Z)Z
org.apache.hadoop.fs.FileSystem.exists(Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.FileSystem.get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;
org.apache.hadoop.fs.FileSystem.get(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;
org.apache.hadoop.fs.FileSystem.getAllStatistics()Ljava/util/List;
org.apache.hadoop.fs.FileSystem.getCanonicalServiceName()Ljava/lang/String;
org.apache.hadoop.fs.FileSystem.getCanonicalUri()Ljava/net/URI;
org.apache.hadoop.fs.FileSystem.getChildFileSystems()[Lorg/apache/hadoop/fs/FileSystem;
org.apache.hadoop.fs.FileSystem.getConf()Lorg/apache/hadoop/conf/Configuration;
org.apache.hadoop.fs.FileSystem.getContentSummary(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/ContentSummary;
org.apache.hadoop.fs.FileSystem.getDefaultBlockSize(Lorg/apache/hadoop/fs/Path;)J
org.apache.hadoop.fs.FileSystem.getDefaultPort()I
org.apache.hadoop.fs.FileSystem.getDefaultReplication(Lorg/apache/hadoop/fs/Path;)S
org.apache.hadoop.fs.FileSystem.getDefaultUri(Lorg/apache/hadoop/conf/Configuration;)Ljava/net/URI;
org.apache.hadoop.fs.FileSystem.getDelegationToken(Ljava/lang/String;)Lorg/apache/hadoop/security/token/Token;
org.apache.hadoop.fs.FileSystem.getFileBlockLocations(Lorg/apache/hadoop/fs/FileStatus;JJ)[Lorg/apache/hadoop/fs/BlockLocation;
org.apache.hadoop.fs.FileSystem.getFileStatus(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileSystem.getFileStatus([Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileSystem.getHomeDirectory()Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileSystem.getLocal(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/LocalFileSystem;
org.apache.hadoop.fs.FileSystem.getUri()Ljava/net/URI;
org.apache.hadoop.fs.FileSystem.getWorkingDirectory()Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileSystem.globPathsLevel([Lorg/apache/hadoop/fs/Path;[Ljava/lang/String;I[Z)[Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileSystem.globStatus(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileSystem.globStatus(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/PathFilter;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileSystem.globStatusInternal(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/PathFilter;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileSystem.isDirectory(Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.FileSystem.listStatus(Ljava/util/ArrayList;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/PathFilter;)V
org.apache.hadoop.fs.FileSystem.listStatus(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileSystem.listStatus(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/PathFilter;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileSystem.listStatus([Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/PathFilter;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.FileSystem.makeQualified(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileSystem.mkdirs(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)Z
org.apache.hadoop.fs.FileSystem.mkdirs(Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.FileSystem.mkdirs(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)Z
org.apache.hadoop.fs.FileSystem.open(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FSDataInputStream;
org.apache.hadoop.fs.FileSystem.open(Lorg/apache/hadoop/fs/Path;I)Lorg/apache/hadoop/fs/FSDataInputStream;
org.apache.hadoop.fs.FileSystem.rename(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.FileSystem.rename(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
org.apache.hadoop.fs.FileSystem.resolvePath(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileSystem.setDefaultUri(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)V
org.apache.hadoop.fs.FileSystem.setPermission(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)V
org.apache.hadoop.fs.FileSystem.setReplication(Lorg/apache/hadoop/fs/Path;S)Z
org.apache.hadoop.fs.FileSystem.setVerifyChecksum(Z)V
org.apache.hadoop.fs.FileSystem.setWriteChecksum(Z)V
org.apache.hadoop.fs.FileSystem.unquotePathComponent(Ljava/lang/String;)Ljava/lang/String;
org.apache.hadoop.fs.FileUtil.checkDependencies(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.FileUtil.checkDest(Ljava/lang/String;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileUtil.chmod(Ljava/lang/String;Ljava/lang/String;)I
org.apache.hadoop.fs.FileUtil.copy(Ljava/io/File;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;ZLorg/apache/hadoop/conf/Configuration;)Z
org.apache.hadoop.fs.FileUtil.copy(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/FileStatus;Ljava/io/File;ZLorg/apache/hadoop/conf/Configuration;)Z
org.apache.hadoop.fs.FileUtil.copy(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/FileStatus;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;ZZLorg/apache/hadoop/conf/Configuration;)Z
org.apache.hadoop.fs.FileUtil.copy(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;ZLorg/apache/hadoop/conf/Configuration;)Z
org.apache.hadoop.fs.FileUtil.copy(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;ZZLorg/apache/hadoop/conf/Configuration;)Z
org.apache.hadoop.fs.FileUtil.fullyDelete(Ljava/io/File;)Z
org.apache.hadoop.fs.FileUtil.getDU(Ljava/io/File;)J
org.apache.hadoop.fs.FileUtil.list(Ljava/io/File;)[Ljava/lang/String;
org.apache.hadoop.fs.FileUtil.listFiles(Ljava/io/File;)[Ljava/io/File;
org.apache.hadoop.fs.FileUtil.makeShellPath(Ljava/io/File;)Ljava/lang/String;
org.apache.hadoop.fs.FileUtil.makeShellPath(Ljava/io/File;Z)Ljava/lang/String;
org.apache.hadoop.fs.FileUtil.stat2Paths([Lorg/apache/hadoop/fs/FileStatus;)[Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.FileUtil.symLink(Ljava/lang/String;Ljava/lang/String;)I
org.apache.hadoop.fs.FileUtil.unTar(Ljava/io/File;Ljava/io/File;)V
org.apache.hadoop.fs.FileUtil.unZip(Ljava/io/File;Ljava/io/File;)V
org.apache.hadoop.fs.FilterFileSystem.setConf(Lorg/apache/hadoop/conf/Configuration;)V
org.apache.hadoop.fs.FsServerDefaults.getBlockSize()J
org.apache.hadoop.fs.FsServerDefaults.getBytesPerChecksum()I
org.apache.hadoop.fs.FsServerDefaults.getChecksumType()Lorg/apache/hadoop/util/DataChecksum$Type;
org.apache.hadoop.fs.FsServerDefaults.getFileBufferSize()I
org.apache.hadoop.fs.FsServerDefaults.getReplication()S
org.apache.hadoop.fs.FsShell.access$000(Lorg/apache/hadoop/fs/FsShell;Ljava/io/PrintStream;)V
org.apache.hadoop.fs.FsShell.access$100(Lorg/apache/hadoop/fs/FsShell;Ljava/io/PrintStream;Ljava/lang/String;)V
org.apache.hadoop.fs.FsShell.access$200(Lorg/apache/hadoop/fs/FsShell;Ljava/io/PrintStream;)V
org.apache.hadoop.fs.FsShell.access$300(Lorg/apache/hadoop/fs/FsShell;Ljava/io/PrintStream;Ljava/lang/String;)V
org.apache.hadoop.fs.FsShell.getConf()Lorg/apache/hadoop/conf/Configuration;
org.apache.hadoop.fs.FsShell.printInstanceHelp(Ljava/io/PrintStream;Lorg/apache/hadoop/fs/shell/Command;)V
org.apache.hadoop.fs.FsShell.printInstanceUsage(Ljava/io/PrintStream;Lorg/apache/hadoop/fs/shell/Command;)V
org.apache.hadoop.fs.FsStatus.getCapacity()J
org.apache.hadoop.fs.FsStatus.getRemaining()J
org.apache.hadoop.fs.FsStatus.getUsed()J
org.apache.hadoop.fs.GlobExpander.expand(Ljava/lang/String;)Ljava/util/List;
org.apache.hadoop.fs.GlobExpander.expandLeftmost(Lorg/apache/hadoop/fs/GlobExpander$StringWithOffset;)Ljava/util/List;
org.apache.hadoop.fs.GlobExpander.leftmostOuterCurlyContainingSlash(Ljava/lang/String;I)I
org.apache.hadoop.fs.GlobFilter.accept(Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.GlobFilter.hasPattern()Z
org.apache.hadoop.fs.GlobFilter.init(Ljava/lang/String;Lorg/apache/hadoop/fs/PathFilter;)V
org.apache.hadoop.fs.GlobPattern.error(Ljava/lang/String;Ljava/lang/String;I)V
org.apache.hadoop.fs.HarFileSystem$HarMetaData.access$100(Lorg/apache/hadoop/fs/HarFileSystem$HarMetaData;)I
org.apache.hadoop.fs.HarFileSystem$HarStatus.getName()Ljava/lang/String;
org.apache.hadoop.fs.HarFileSystem.access$200(Lorg/apache/hadoop/fs/HarFileSystem;Ljava/lang/String;)Ljava/lang/String;
org.apache.hadoop.fs.HarFileSystem.access$300(Lorg/apache/hadoop/fs/HarFileSystem;)Lorg/apache/hadoop/fs/HarFileSystem$HarMetaData;
org.apache.hadoop.fs.HarFileSystem.access$400(Ljava/lang/String;)Ljava/lang/String;
org.apache.hadoop.fs.HarFileSystem.getConf()Lorg/apache/hadoop/conf/Configuration;
org.apache.hadoop.fs.HarFileSystem.toFileStatus(Lorg/apache/hadoop/fs/HarFileSystem$HarStatus;Ljava/util/Map;)Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.HardLink$LinkStats.report()Ljava/lang/String;
org.apache.hadoop.fs.HardLink.createHardLink(Ljava/io/File;Ljava/io/File;)V
org.apache.hadoop.fs.HardLink.createHardLinkMult(Ljava/io/File;[Ljava/lang/String;Ljava/io/File;)V
org.apache.hadoop.fs.Hdfs.getUriPath(Lorg/apache/hadoop/fs/Path;)Ljava/lang/String;
org.apache.hadoop.fs.Hdfs.makeQualified(Lorg/apache/hadoop/hdfs/protocol/HdfsFileStatus;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext.confChanged(Lorg/apache/hadoop/conf/Configuration;)V
org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext.createPath(Ljava/lang/String;Z)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.LocalDirAllocator.getLocalPathForWrite(Ljava/lang/String;JLorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.LocalDirAllocator.getLocalPathForWrite(Ljava/lang/String;JLorg/apache/hadoop/conf/Configuration;Z)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.LocalDirAllocator.getLocalPathForWrite(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.LocalDirAllocator.getLocalPathToRead(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.LocalDirAllocator.removeContext(Ljava/lang/String;)V
org.apache.hadoop.fs.LocalFileSystem.delete(Lorg/apache/hadoop/fs/Path;Z)Z
org.apache.hadoop.fs.LocalFileSystem.getChecksumFile(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.LocalFileSystem.getConf()Lorg/apache/hadoop/conf/Configuration;
org.apache.hadoop.fs.LocalFileSystem.getFileStatus(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.LocalFileSystem.getRaw()Lorg/apache/hadoop/fs/FileSystem;
org.apache.hadoop.fs.LocalFileSystem.getRawFileSystem()Lorg/apache/hadoop/fs/FileSystem;
org.apache.hadoop.fs.LocalFileSystem.pathToFile(Lorg/apache/hadoop/fs/Path;)Ljava/io/File;
org.apache.hadoop.fs.LocalFileSystem.rename(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.LocalFileSystem.setPermission(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)V
org.apache.hadoop.fs.LocatedFileStatus.getPath()Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.MD5MD5CRC32FileChecksum.getAlgorithmName()Ljava/lang/String;
org.apache.hadoop.fs.Options$ChecksumOpt.getBytesPerChecksum()I
org.apache.hadoop.fs.Options$ChecksumOpt.getChecksumType()Lorg/apache/hadoop/util/DataChecksum$Type;
org.apache.hadoop.fs.Options$ChecksumOpt.processChecksumOpt(Lorg/apache/hadoop/fs/Options$ChecksumOpt;Lorg/apache/hadoop/fs/Options$ChecksumOpt;)Lorg/apache/hadoop/fs/Options$ChecksumOpt;
org.apache.hadoop.fs.Options$ChecksumOpt.processChecksumOpt(Lorg/apache/hadoop/fs/Options$ChecksumOpt;Lorg/apache/hadoop/fs/Options$ChecksumOpt;I)Lorg/apache/hadoop/fs/Options$ChecksumOpt;
org.apache.hadoop.fs.Options$CreateOpts$BlockSize.getValue()J
org.apache.hadoop.fs.Options$CreateOpts$BufferSize.getValue()I
org.apache.hadoop.fs.Options$CreateOpts$BytesPerChecksum.getValue()I
org.apache.hadoop.fs.Options$CreateOpts$ChecksumParam.getValue()Lorg/apache/hadoop/fs/Options$ChecksumOpt;
org.apache.hadoop.fs.Options$CreateOpts$CreateParent.getValue()Z
org.apache.hadoop.fs.Options$CreateOpts$Perms.getValue()Lorg/apache/hadoop/fs/permission/FsPermission;
org.apache.hadoop.fs.Options$CreateOpts$Progress.getValue()Lorg/apache/hadoop/util/Progressable;
org.apache.hadoop.fs.Options$CreateOpts$ReplicationFactor.getValue()S
org.apache.hadoop.fs.Options$Rename.value()B
org.apache.hadoop.fs.Options$Rename.valueOf(B)Lorg/apache/hadoop/fs/Options$Rename;
org.apache.hadoop.fs.Path.checkPathArg(Ljava/lang/String;)V
org.apache.hadoop.fs.Path.compareTo(Ljava/lang/Object;)I
org.apache.hadoop.fs.Path.depth()I
org.apache.hadoop.fs.Path.equals(Ljava/lang/Object;)Z
org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;
org.apache.hadoop.fs.Path.getName()Ljava/lang/String;
org.apache.hadoop.fs.Path.getParent()Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.Path.hasWindowsDrive(Ljava/lang/String;Z)Z
org.apache.hadoop.fs.Path.initialize(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
org.apache.hadoop.fs.Path.isAbsolute()Z
org.apache.hadoop.fs.Path.isAbsoluteAndSchemeAuthorityNull()Z
org.apache.hadoop.fs.Path.isUriPathAbsolute()Z
org.apache.hadoop.fs.Path.makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.Path.makeQualified(Lorg/apache/hadoop/fs/FileSystem;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.Path.suffix(Ljava/lang/String;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.Path.toString()Ljava/lang/String;
org.apache.hadoop.fs.Path.toUri()Ljava/net/URI;
org.apache.hadoop.fs.PathFilter.accept(Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.RawLocalFileSystem$RawLocalFileStatus.isPermissionLoaded()Z
org.apache.hadoop.fs.RawLocalFileSystem$RawLocalFileStatus.loadPermissionInfo()V
org.apache.hadoop.fs.RawLocalFileSystem.getDefaultBlockSize()J
org.apache.hadoop.fs.RawLocalFileSystem.getFileStatus(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.RawLocalFileSystem.pathToFile(Lorg/apache/hadoop/fs/Path;)Ljava/io/File;
org.apache.hadoop.fs.RemoteIterator.hasNext()Z
org.apache.hadoop.fs.RemoteIterator.next()Ljava/lang/Object;
org.apache.hadoop.fs.Seekable.getPos()J
org.apache.hadoop.fs.Trash.getEmptier()Ljava/lang/Runnable;
org.apache.hadoop.fs.TrashPolicy.getInstance(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/TrashPolicy;
org.apache.hadoop.fs.TrashPolicyDefault$Emptier.ceiling(JJ)J
org.apache.hadoop.fs.TrashPolicyDefault.access$000()Lorg/apache/commons/logging/Log;
org.apache.hadoop.fs.TrashPolicyDefault.access$100(Lorg/apache/hadoop/fs/TrashPolicyDefault;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.TrashPolicyDefault.createCheckpoint()V
org.apache.hadoop.fs.TrashPolicyDefault.deleteCheckpoint()V
org.apache.hadoop.fs.TrashPolicyDefault.initialize(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.TrashPolicyDefault.isEnabled()Z
org.apache.hadoop.fs.TrashPolicyDefault.makeTrashRelativePath(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.UnresolvedLinkException.getMessage()Ljava/lang/String;
org.apache.hadoop.fs.ftp.FTPFileSystem.delete(Lorg/apache/commons/net/ftp/FTPClient;Lorg/apache/hadoop/fs/Path;Z)Z
org.apache.hadoop.fs.ftp.FTPFileSystem.getFileStatus(Lorg/apache/commons/net/ftp/FTPClient;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.ftp.FTPFileSystem.getFileStatus(Lorg/apache/commons/net/ftp/FTPFile;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.ftp.FTPFileSystem.listStatus(Lorg/apache/commons/net/ftp/FTPClient;Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.ftp.FTPFileSystem.makeAbsolute(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.kfs.IFSImpl.getDataLocation(Ljava/lang/String;JJ)[[Ljava/lang/String;
org.apache.hadoop.fs.kfs.IFSImpl.isFile(Ljava/lang/String;)Z
org.apache.hadoop.fs.kfs.IFSImpl.remove(Ljava/lang/String;)I
org.apache.hadoop.fs.kfs.IFSImpl.rmdir(Ljava/lang/String;)I
org.apache.hadoop.fs.kfs.KosmosFileSystem.delete(Lorg/apache/hadoop/fs/Path;Z)Z
org.apache.hadoop.fs.kfs.KosmosFileSystem.getDefaultBlockSize()J
org.apache.hadoop.fs.kfs.KosmosFileSystem.listStatus(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.kfs.KosmosFileSystem.makeAbsolute(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.permission.FsAction.implies(Lorg/apache/hadoop/fs/permission/FsAction;)Z
org.apache.hadoop.fs.permission.FsAction.or(Lorg/apache/hadoop/fs/permission/FsAction;)Lorg/apache/hadoop/fs/permission/FsAction;
org.apache.hadoop.fs.permission.FsPermission.applyUMask(Lorg/apache/hadoop/fs/permission/FsPermission;)Lorg/apache/hadoop/fs/permission/FsPermission;
org.apache.hadoop.fs.permission.FsPermission.equals(Ljava/lang/Object;)Z
org.apache.hadoop.fs.permission.FsPermission.fromShort(S)V
org.apache.hadoop.fs.permission.FsPermission.getDefault()Lorg/apache/hadoop/fs/permission/FsPermission;
org.apache.hadoop.fs.permission.FsPermission.getGroupAction()Lorg/apache/hadoop/fs/permission/FsAction;
org.apache.hadoop.fs.permission.FsPermission.getOtherAction()Lorg/apache/hadoop/fs/permission/FsAction;
org.apache.hadoop.fs.permission.FsPermission.getStickyBit()Z
org.apache.hadoop.fs.permission.FsPermission.getUMask(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/permission/FsPermission;
org.apache.hadoop.fs.permission.FsPermission.getUserAction()Lorg/apache/hadoop/fs/permission/FsAction;
org.apache.hadoop.fs.permission.FsPermission.read(Ljava/io/DataInput;)Lorg/apache/hadoop/fs/permission/FsPermission;
org.apache.hadoop.fs.permission.FsPermission.readFields(Ljava/io/DataInput;)V
org.apache.hadoop.fs.permission.FsPermission.set(Lorg/apache/hadoop/fs/permission/FsAction;Lorg/apache/hadoop/fs/permission/FsAction;Lorg/apache/hadoop/fs/permission/FsAction;Z)V
org.apache.hadoop.fs.permission.FsPermission.toShort()S
org.apache.hadoop.fs.permission.FsPermission.toString()Ljava/lang/String;
org.apache.hadoop.fs.permission.FsPermission.write(Ljava/io/DataOutput;)V
org.apache.hadoop.fs.permission.PermissionParser.applyNormalPattern(Ljava/lang/String;Ljava/util/regex/Matcher;)V
org.apache.hadoop.fs.permission.PermissionParser.applyOctalPattern(Ljava/lang/String;Ljava/util/regex/Matcher;)V
org.apache.hadoop.fs.permission.PermissionStatus.applyUMask(Lorg/apache/hadoop/fs/permission/FsPermission;)Lorg/apache/hadoop/fs/permission/PermissionStatus;
org.apache.hadoop.fs.permission.PermissionStatus.createImmutable(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/fs/permission/FsPermission;)Lorg/apache/hadoop/fs/permission/PermissionStatus;
org.apache.hadoop.fs.permission.PermissionStatus.getGroupName()Ljava/lang/String;
org.apache.hadoop.fs.permission.PermissionStatus.getPermission()Lorg/apache/hadoop/fs/permission/FsPermission;
org.apache.hadoop.fs.permission.PermissionStatus.getUserName()Ljava/lang/String;
org.apache.hadoop.fs.permission.PermissionStatus.read(Ljava/io/DataInput;)Lorg/apache/hadoop/fs/permission/PermissionStatus;
org.apache.hadoop.fs.permission.PermissionStatus.write(Ljava/io/DataOutput;)V
org.apache.hadoop.fs.permission.PermissionStatus.write(Ljava/io/DataOutput;Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/fs/permission/FsPermission;)V
org.apache.hadoop.fs.permission.UmaskParser.combineModes(IZ)I
org.apache.hadoop.fs.permission.UmaskParser.getUMask()S
org.apache.hadoop.fs.s3.Block.getId()J
org.apache.hadoop.fs.s3.Block.getLength()J
org.apache.hadoop.fs.s3.FileSystemStore.blockExists(J)Z
org.apache.hadoop.fs.s3.FileSystemStore.deleteBlock(Lorg/apache/hadoop/fs/s3/Block;)V
org.apache.hadoop.fs.s3.FileSystemStore.deleteINode(Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.s3.FileSystemStore.listDeepSubPaths(Lorg/apache/hadoop/fs/Path;)Ljava/util/Set;
org.apache.hadoop.fs.s3.FileSystemStore.listSubPaths(Lorg/apache/hadoop/fs/Path;)Ljava/util/Set;
org.apache.hadoop.fs.s3.FileSystemStore.retrieveBlock(Lorg/apache/hadoop/fs/s3/Block;J)Ljava/io/File;
org.apache.hadoop.fs.s3.FileSystemStore.retrieveINode(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/s3/INode;
org.apache.hadoop.fs.s3.FileSystemStore.storeINode(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/s3/INode;)V
org.apache.hadoop.fs.s3.INode$FileType.ordinal()I
org.apache.hadoop.fs.s3.INode.getBlocks()[Lorg/apache/hadoop/fs/s3/Block;
org.apache.hadoop.fs.s3.INode.getFileType()Lorg/apache/hadoop/fs/s3/INode$FileType;
org.apache.hadoop.fs.s3.INode.isDirectory()Z
org.apache.hadoop.fs.s3.INode.isFile()Z
org.apache.hadoop.fs.s3.Jets3tFileSystemStore.blockToKey(Lorg/apache/hadoop/fs/s3/Block;)Ljava/lang/String;
org.apache.hadoop.fs.s3.Jets3tFileSystemStore.closeQuietly(Ljava/io/Closeable;)V
org.apache.hadoop.fs.s3.Jets3tFileSystemStore.get(Ljava/lang/String;J)Ljava/io/InputStream;
org.apache.hadoop.fs.s3.Jets3tFileSystemStore.keyToPath(Ljava/lang/String;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.s3.Jets3tFileSystemStore.newBackupFile()Ljava/io/File;
org.apache.hadoop.fs.s3.Jets3tFileSystemStore.pathToKey(Lorg/apache/hadoop/fs/Path;)Ljava/lang/String;
org.apache.hadoop.fs.s3.Jets3tFileSystemStore.retrieveINode(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/s3/INode;
org.apache.hadoop.fs.s3.MigrationTool$Store.deleteINode(Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.s3.MigrationTool$Store.listAllPaths()Ljava/util/Set;
org.apache.hadoop.fs.s3.MigrationTool$Store.retrieveINode(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/s3/INode;
org.apache.hadoop.fs.s3.MigrationTool$UnversionedStore.keyToPath(Ljava/lang/String;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.s3.MigrationTool$UnversionedStore.urlEncode(Ljava/lang/String;)Ljava/lang/String;
org.apache.hadoop.fs.s3.MigrationTool.access$000(Lorg/apache/hadoop/fs/s3/MigrationTool;)Lorg/jets3t/service/model/S3Bucket;
org.apache.hadoop.fs.s3.MigrationTool.access$100(Lorg/apache/hadoop/fs/s3/MigrationTool;)Lorg/jets3t/service/S3Service;
org.apache.hadoop.fs.s3.S3FileSystem$S3FileStatus.findBlocksize(Lorg/apache/hadoop/fs/s3/INode;)J
org.apache.hadoop.fs.s3.S3FileSystem$S3FileStatus.findLength(Lorg/apache/hadoop/fs/s3/INode;)J
org.apache.hadoop.fs.s3.S3FileSystem.delete(Lorg/apache/hadoop/fs/Path;Z)Z
org.apache.hadoop.fs.s3.S3FileSystem.getFileStatus(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.s3.S3FileSystem.listStatus(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.s3.S3FileSystem.makeAbsolute(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.s3.S3FileSystem.mkdir(Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.s3.S3OutputStream.flush()V
org.apache.hadoop.fs.s3native.FileMetadata.getKey()Ljava/lang/String;
org.apache.hadoop.fs.s3native.Jets3tNativeFileSystemStore.handleServiceException(Lorg/jets3t/service/S3ServiceException;)V
org.apache.hadoop.fs.s3native.NativeFileSystemStore.copy(Ljava/lang/String;Ljava/lang/String;)V
org.apache.hadoop.fs.s3native.NativeFileSystemStore.delete(Ljava/lang/String;)V
org.apache.hadoop.fs.s3native.NativeFileSystemStore.list(Ljava/lang/String;ILjava/lang/String;Z)Lorg/apache/hadoop/fs/s3native/PartialListing;
org.apache.hadoop.fs.s3native.NativeFileSystemStore.retrieveMetadata(Ljava/lang/String;)Lorg/apache/hadoop/fs/s3native/FileMetadata;
org.apache.hadoop.fs.s3native.NativeFileSystemStore.storeEmptyFile(Ljava/lang/String;)V
org.apache.hadoop.fs.s3native.NativeS3FileSystem.createParent(Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.s3native.NativeS3FileSystem.getFileStatus(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.s3native.NativeS3FileSystem.keyToPath(Ljava/lang/String;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.s3native.NativeS3FileSystem.listStatus(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.s3native.NativeS3FileSystem.makeAbsolute(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.s3native.NativeS3FileSystem.mkdir(Lorg/apache/hadoop/fs/Path;)Z
org.apache.hadoop.fs.s3native.NativeS3FileSystem.newDirectory(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.s3native.NativeS3FileSystem.newFile(Lorg/apache/hadoop/fs/s3native/FileMetadata;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.s3native.NativeS3FileSystem.pathToKey(Lorg/apache/hadoop/fs/Path;)Ljava/lang/String;
org.apache.hadoop.fs.s3native.PartialListing.getCommonPrefixes()[Ljava/lang/String;
org.apache.hadoop.fs.s3native.PartialListing.getFiles()[Lorg/apache/hadoop/fs/s3native/FileMetadata;
org.apache.hadoop.fs.s3native.PartialListing.getPriorLastKey()Ljava/lang/String;
org.apache.hadoop.fs.shell.Command.displayError(Ljava/lang/Exception;)V
org.apache.hadoop.fs.shell.Command.expandArgument(Ljava/lang/String;)Ljava/util/List;
org.apache.hadoop.fs.shell.Command.getConf()Lorg/apache/hadoop/conf/Configuration;
org.apache.hadoop.fs.shell.Command.getDescription()Ljava/lang/String;
org.apache.hadoop.fs.shell.Command.getUsage()Ljava/lang/String;
org.apache.hadoop.fs.shell.Command.isDeprecated()Z
org.apache.hadoop.fs.shell.Command.processArgument(Lorg/apache/hadoop/fs/shell/PathData;)V
org.apache.hadoop.fs.shell.Command.processPath(Lorg/apache/hadoop/fs/shell/PathData;)V
org.apache.hadoop.fs.shell.Command.recursePath(Lorg/apache/hadoop/fs/shell/PathData;)V
org.apache.hadoop.fs.shell.Command.run(Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.shell.CommandFactory.getInstance(Ljava/lang/String;)Lorg/apache/hadoop/fs/shell/Command;
org.apache.hadoop.fs.shell.CommandFactory.getNames()[Ljava/lang/String;
org.apache.hadoop.fs.shell.CommandFormat$IllegalNumberOfArgumentsException.getMessage()Ljava/lang/String;
org.apache.hadoop.fs.shell.CopyCommands$Merge.getConf()Lorg/apache/hadoop/conf/Configuration;
org.apache.hadoop.fs.shell.FsCommand.processArguments(Ljava/util/LinkedList;)V
org.apache.hadoop.fs.shell.FsUsage$TableBuilder.isEmpty()Z
org.apache.hadoop.fs.shell.Ls.maxLength(ILjava/lang/Object;)I
org.apache.hadoop.fs.shell.PathData$PathType.ordinal()I
org.apache.hadoop.fs.shell.PathData.checkIfExists(Lorg/apache/hadoop/fs/shell/PathData$FileTypeRequirement;)V
org.apache.hadoop.fs.shell.PathData.compareTo(Lorg/apache/hadoop/fs/shell/PathData;)I
org.apache.hadoop.fs.shell.PathData.expandAsGlob(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)[Lorg/apache/hadoop/fs/shell/PathData;
org.apache.hadoop.fs.shell.PathData.findLongestDirPrefix(Ljava/lang/String;Ljava/lang/String;Z)I
org.apache.hadoop.fs.shell.PathData.getStringForChildPath(Lorg/apache/hadoop/fs/Path;)Ljava/lang/String;
org.apache.hadoop.fs.shell.PathData.refreshStatus()Lorg/apache/hadoop/fs/FileStatus;
org.apache.hadoop.fs.shell.PathData.relativize(Ljava/net/URI;Ljava/net/URI;Z)Ljava/lang/String;
org.apache.hadoop.fs.shell.PathData.removeAuthority(Ljava/net/URI;)Ljava/net/URI;
org.apache.hadoop.fs.shell.PathData.setStat(Lorg/apache/hadoop/fs/FileStatus;)V
org.apache.hadoop.fs.shell.PathData.stringToUri(Ljava/lang/String;)Ljava/net/URI;
org.apache.hadoop.fs.shell.PathData.toString()Ljava/lang/String;
org.apache.hadoop.fs.shell.PathExceptions$PathIOException.formatPath(Ljava/lang/String;)Ljava/lang/String;
org.apache.hadoop.fs.shell.PathExceptions$PathIOException.getCause()Ljava/lang/Throwable;
org.apache.hadoop.fs.shell.Tail.dumpFromOffset(Lorg/apache/hadoop/fs/shell/PathData;J)J
org.apache.hadoop.fs.viewfs.ChRootedFileSystem.stripOutRoot(Lorg/apache/hadoop/fs/Path;)Ljava/lang/String;
org.apache.hadoop.fs.viewfs.ChRootedFs.stripOutRoot(Lorg/apache/hadoop/fs/Path;)Ljava/lang/String;
org.apache.hadoop.fs.viewfs.ConfigUtil.getHomeDirValue(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Ljava/lang/String;
org.apache.hadoop.fs.viewfs.InodeTree$INodeDir.addDir(Ljava/lang/String;Lorg/apache/hadoop/security/UserGroupInformation;)Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
org.apache.hadoop.fs.viewfs.InodeTree$INodeDir.addLink(Ljava/lang/String;Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeLink;)V
org.apache.hadoop.fs.viewfs.InodeTree$INodeDir.resolveInternal(Ljava/lang/String;)Lorg/apache/hadoop/fs/viewfs/InodeTree$INode;
org.apache.hadoop.fs.viewfs.InodeTree$INodeLink.getTargetLink()Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.viewfs.InodeTree$ResolveResult.isInternalDir()Z
org.apache.hadoop.fs.viewfs.InodeTree.breakIntoPathComponents(Ljava/lang/String;)[Ljava/lang/String;
org.apache.hadoop.fs.viewfs.InodeTree.createLink(Ljava/lang/String;Ljava/lang/String;ZLorg/apache/hadoop/security/UserGroupInformation;)V
org.apache.hadoop.fs.viewfs.InodeTree.getMountPoints()Ljava/util/List;
org.apache.hadoop.fs.viewfs.InodeTree.getTargetFileSystem(Ljava/net/URI;)Ljava/lang/Object;
org.apache.hadoop.fs.viewfs.InodeTree.getTargetFileSystem(Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;)Ljava/lang/Object;
org.apache.hadoop.fs.viewfs.InodeTree.getTargetFileSystem([Ljava/net/URI;)Ljava/lang/Object;
org.apache.hadoop.fs.viewfs.InodeTree.resolve(Ljava/lang/String;Z)Lorg/apache/hadoop/fs/viewfs/InodeTree$ResolveResult;
org.apache.hadoop.fs.viewfs.ViewFileSystem$InternalDirOfViewFs.checkPathIsSlash(Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.viewfs.ViewFileSystem.getUriPath(Lorg/apache/hadoop/fs/Path;)Ljava/lang/String;
org.apache.hadoop.fs.viewfs.ViewFileSystem.makeQualified(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs.checkPathIsSlash(Lorg/apache/hadoop/fs/Path;)V
org.apache.hadoop.fs.viewfs.ViewFs.getUriPath(Lorg/apache/hadoop/fs/Path;)Ljava/lang/String;
org.apache.hadoop.fs.viewfs.ViewFs.makeQualified(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
